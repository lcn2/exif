#!/usr/bin/env bash
#
# exifforceorder - force DateTimeOriginal order in a directory for iPad
#
# The iPod displays images in a directory by order of the DateTimeOriginal
# value.  This tool will change the DateTimeOriginal values so that they
# will match the file order of images in a given directory.
#
# If the next file (in filename order) has a DateTimeOriginal that is
# less than the previous file we will change its DateTimeOriginal to
# be 1 second later.
#
# When we advance the DateTimeOriginal 1 second later, we need simply
# add 1 to the second.  This is because a time such as "0:46:60" is
# converted into "0:47:00" and "0:46:61" into "0:47:01".
#
# Copyright (c) 2005-2009,2012-2013,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


# setup
#
export VERSION="4.12.1 2025-04-03"
NAME=$(basename "$0")
export NAME
#
export V_FLAG=
#
export NOOP=
export DO_NOT_PROCESS=

# usage
#
export USAGE="usage: $0 [-h] [-v level] [-V] [-n] [-N] [-o arg] [-d] [-f] dir

    -h          print help message and exit
    -v level    set verbosity level (def level: $V_FLAG)
    -V          print version string and exit

    -n          go thru the actions, but do not update any files (def: do the action)
    -N          do not process anything, just parse arguments (def: process something)

    -o arg      obsolete - ignored
    -d          obsolete - ignored
    -f          obsolete - ignored

    dir         directory containing images

Exit codes:
     0         all OK
     1         some internal tool exited non-zero
     2         -h and help string printed or -V and version string printed
     3         command line error
     4	       dir is not a direcotry
 >= 10         internal error

$NAME version: $VERSION"


# parse command line
#
while getopts :hv:VnNo:df flag; do
  case "$flag" in
    h) echo "$USAGE"
        exit 2
        ;;
    v) V_FLAG="$OPTARG"
        ;;
    V) echo "$VERSION"
        exit 2
        ;;
    n) NOOP="-n"
        ;;
    N) DO_NOT_PROCESS="-N"
        ;;
    o) ;;
    d) ;;
    f) ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
  esac
done
if [[ $V_FLAG -ge 1 ]]; then
    echo "$0: debug[1]: debug level: $V_FLAG" 1>&2
fi
#
# remove the options
#
shift $(( OPTIND - 1 ));
#
# verify arg count
#
if [[ $# -lt 1 ]]; then
    echo "$0: ERROR: expected at least 1 arg, found: $#" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
export IMG_DIR="$1"


# firewall - must be a directory
#
if [[ ! -d "$IMG_DIR" ]]; then
    echo "$0: ERROR: not a directory: $IMG_DIR" 1>&2
    exit 4
fi


# print running info if verbose
#
# If -v 3 or higher, print exported variables in order that they were exported.
#
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: VERSION=$VERSION" 1>&2
    echo "$0: debug[3]: NAME=$NAME" 1>&2
    echo "$0: debug[3]: V_FLAG=$V_FLAG" 1>&2
    echo "$0: debug[3]: NOOP=$NOOP" 1>&2
    echo "$0: debug[3]: DO_NOT_PROCESS=$DO_NOT_PROCESS" 1>&2
    echo "$0: debug[3]: IMG_DIR=$IMG_DIR" 1>&2
fi


# -N stops early before any processing is performed
#
if [[ -n $DO_NOT_PROCESS ]]; then
    if [[ $V_FLAG -ge 3 ]]; then
        echo "$0: debug[3]: arguments parsed, -N given, exiting 0" 1>&2
    fi
    exit 0
fi


# cd to IMG_DIR
#
export CD_FAILED
if [[ $V_FLAG -ge 5 ]]; then
    echo "$0: debug[5]: about to: cd $IMG_DIR" 1>&2
fi
cd "$IMG_DIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $IMG_DIR failed" 1>&2
    exit 6
fi
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi


# process each image
#
#	cr2 raw tif tiff jpg jpeg png gif psd eps
#
PREV_DateTimeOriginal=
PREV_TIMESTAMP=
export PREV_DateTimeOriginal PREV_TIMESTAMP
DateTimeOriginal=
TIMESTAMP=
export DateTimeOriginal TIMESTAMP
NEXT_DateTimeOriginal=
NEXT_TIMESTAMP=
export NEXT_DateTimeOriginal NEXT_TIMESTAMP
find . \( -iname '*.cr2' -o \
	  -iname '*.raw' -o \
	  -iname '*.tiff' -o \
	  -iname '*.jpg' -o \
	  -iname '*.jpeg' -o \
	  -iname '*.png' -o \
	  -iname '*.gif' -o \
	  -iname '*.psd' -o \
	  -iname '*.eps' \) -mindepth 1 -maxdepth 1 \
	  -print | while read -r file; do

    # if this is our first file, just note its DateTimeOriginal
    #
    if [[ -z "$PREV_DateTimeOriginal" ]]; then
	PREV_TIMESTAMP="{$PREV_DateTimeOriginal//[ :-]/}"
	if [[ -n "$V_FLAG" ]]; then
	    echo "1st file: $file DateTimeOriginal: $PREV_DateTimeOriginal timestamp: $PREV_TIMESTAMP" 1>&2
	fi
	continue
    else
	DateTimeOriginal=$(exif -t DateTimeOriginal "$file")
	TIMESTAMP="{$DateTimeOriginal//[ :-]/}"
	if [[ -n "$V_FLAG" ]]; then
	    echo "nxt file: $file DateTimeOriginal: $DateTimeOriginal timestamp: $TIMESTAMP" 1>&2
	fi
    fi

    # if this timestamp is later than the previous, remember it and move on
    #
    if [[ "$PREV_TIMESTAMP" -lt "$TIMESTAMP" ]]; then
	if [[ -n "$V_FLAG" ]]; then
	    echo "prev DateTimeOriginal: $PREV_DateTimeOriginal < this DateTimeOriginal: $DateTimeOriginal" 1>&2
	    echo "prev PREV_TIMESTAMP: $PREV_TIMESTAMP < this TIMESTAMP: $TIMESTAMP" 1>&2
	fi
	PREV_DateTimeOriginal="$DateTimeOriginal"
	PREV_TIMESTAMP="$TIMESTAMP"
	if [[ -n "$V_FLAG" ]]; then
	    echo "" 1>&2
	fi
	continue
    fi
    if [[ -n "$V_FLAG" ]]; then
	echo "prev DateTimeOriginal: $PREV_DateTimeOriginal >= this DateTimeOriginal: $DateTimeOriginal" 1>&2
	echo "prev PREV_TIMESTAMP: $PREV_TIMESTAMP >= this TIMESTAMP: $TIMESTAMP" 1>&2
    fi

    # form a DateTimeOriginal that is one second later
    #
    ((NEXT_TIMESTAMP=PREV_TIMESTAMP+1))
    # We will keep the sed expression rather than use complex bash substutuion
    #
    # SC2001 (style): See if you can use ${variable//search/replace} instead.
    # https://www.shellcheck.net/wiki/SC2001
    # shellcheck disable=SC2001
    NEXT_DateTimeOriginal=$(echo "$NEXT_TIMESTAMP" | sed -e 's/\(....\)\(..\)\(..\)\(..\)\(..\)\(..\)/\1-\2-\3 \4:\5:\6/')
    if [[ -n "$V_FLAG" ]]; then
	echo "next DateTimeOriginal: $NEXT_DateTimeOriginal next timestamp: $NEXT_TIMESTAMP" 1>&2
    fi

    # change the DateTimeOriginal of the current file
    #
    if [[ -n "$V_FLAG" ]]; then
	echo "exiftool -quiet -overwrite_original -DateTimeOriginal=$NEXT_DateTimeOriginal $file" 1>&2
    fi
    if [[ -z "$NOOP" ]]; then
	exiftool -quiet -overwrite_original -DateTimeOriginal="$NEXT_DateTimeOriginal" "$file"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: Warning: exiftool exit code: $status" 1>&2
	fi
    fi

    # save the new DateTimeOriginal as the
    #
    PREV_DateTimeOriginal="$NEXT_DateTimeOriginal"
    PREV_TIMESTAMP="$NEXT_TIMESTAMP"
done


# All Done!! - Jessica Noll, Age 2
#
exit 0
